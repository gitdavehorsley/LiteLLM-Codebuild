AWSTemplateFormatVersion: '2010-09-09'
Description: 'CloudFormation template for LiteLLM ECS Task Definition with Bedrock permissions'

Parameters:
  ImageRepository:
    Type: String
    Description: 'Docker image repository URL for LiteLLM'
    Default: 'ghcr.io/berriai/litellm:main-latest'
  
  ImageTag:
    Type: String
    Description: 'Docker image tag'
    Default: 'latest'
  
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: 'VPC ID where the security group will be created'
  
  TaskCpu:
    Type: String
    Description: 'CPU units for the task (256, 512, 1024, 2048, 4096)'
    Default: '512'
    AllowedValues:
      - '256'
      - '512'
      - '1024'
      - '2048'
      - '4096'
  
  TaskMemory:
    Type: String
    Description: 'Memory for the task in MB'
    Default: '1024'
    AllowedValues:
      - '512'
      - '1024'
      - '2048'
      - '3072'
      - '4096'
      - '5120'
      - '6144'
      - '7168'
      - '8192'
  
  ContainerPort:
    Type: Number
    Description: 'Port on which LiteLLM container listens'
    Default: 4000
  
  LogGroupRetentionDays:
    Type: Number
    Description: 'CloudWatch log group retention in days'
    Default: 7
    AllowedValues: [1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827, 3653]
  
  ClaudeModel:
    Type: String
    Description: 'Claude model to use in Bedrock'
    Default: 'anthropic.claude-3-5-sonnet-20241022-v2:0'
    AllowedValues:
      - 'anthropic.claude-3-5-sonnet-20241022-v2:0'
      - 'anthropic.claude-3-5-sonnet-20240620-v1:0'
      - 'anthropic.claude-3-sonnet-20240229-v1:0'
      - 'anthropic.claude-3-haiku-20240307-v1:0'

Resources:
  # Security Group for LiteLLM
  LiteLLMSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 'Security group for LiteLLM ECS tasks'
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref ContainerPort
          ToPort: !Ref ContainerPort
          CidrIp: '10.0.0.0/8'
          Description: 'Allow incoming traffic from private networks'
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: '0.0.0.0/0'
          Description: 'Allow all outbound traffic'
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-litellm-sg'
        - Key: Purpose
          Value: 'LiteLLM ECS Task'

  # IAM Role for ECS Task Execution
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${AWS::StackName}-ecs-execution-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-ecs-execution-role'
        - Key: Purpose
          Value: 'LiteLLM ECS Task Execution'

  # IAM Role for ECS Task (with Bedrock permissions)
  ECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${AWS::StackName}-ecs-task-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: BedrockAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - bedrock:InvokeModel
                  - bedrock:InvokeModelWithResponseStream
                Resource: 
                  - !Sub 'arn:aws:bedrock:${AWS::Region}::foundation-model/anthropic.claude-3-5-sonnet-20241022-v2:0'
                  - !Sub 'arn:aws:bedrock:${AWS::Region}::foundation-model/anthropic.claude-3-5-sonnet-20240620-v1:0'
                  - !Sub 'arn:aws:bedrock:${AWS::Region}::foundation-model/anthropic.claude-3-sonnet-20240229-v1:0'
                  - !Sub 'arn:aws:bedrock:${AWS::Region}::foundation-model/anthropic.claude-3-haiku-20240307-v1:0'
                  - !Sub 'arn:aws:bedrock:${AWS::Region}:${AWS::AccountId}:custom-model/*'
                  - !Sub 'arn:aws:bedrock:${AWS::Region}:${AWS::AccountId}:provisioned-model/*'
              - Effect: Allow
                Action:
                  - bedrock:ListFoundationModels
                  - bedrock:GetFoundationModel
                  - bedrock:ListModelCustomizationJobs
                  - bedrock:GetModelCustomizationJob
                  - bedrock:CreateModelCustomizationJob
                  - bedrock:StopModelCustomizationJob
                  - bedrock:DeleteModelCustomizationJob
                  - bedrock:GetCustomModel
                  - bedrock:ListCustomModels
                  - bedrock:CreateProvisionedModelThroughput
                  - bedrock:GetProvisionedModelThroughput
                  - bedrock:ListProvisionedModelThroughputs
                  - bedrock:UpdateProvisionedModelThroughput
                  - bedrock:DeleteProvisionedModelThroughput
                Resource: 
                  - !Sub 'arn:aws:bedrock:${AWS::Region}:${AWS::AccountId}:model-customization-job/*'
                  - !Sub 'arn:aws:bedrock:${AWS::Region}:${AWS::AccountId}:custom-model/*'
                  - !Sub 'arn:aws:bedrock:${AWS::Region}:${AWS::AccountId}:provisioned-model/*'
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub '${LiteLLMLogGroup}:*'
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-ecs-task-role'
        - Key: Purpose
          Value: 'LiteLLM ECS Task with Bedrock Access'

  # CloudWatch Log Group
  LiteLLMLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/ecs/${AWS::StackName}-litellm'
      RetentionInDays: !Ref LogGroupRetentionDays
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-litellm-logs'
        - Key: Purpose
          Value: 'LiteLLM ECS Task Logs'

  # ECS Task Definition
  LiteLLMTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub '${AWS::StackName}-litellm'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: !Ref TaskCpu
      Memory: !Ref TaskMemory
      ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      TaskRoleArn: !GetAtt ECSTaskRole.Arn
      ContainerDefinitions:
        - Name: litellm
          Image: !Sub '${ImageRepository}:${ImageTag}'
          Essential: true
          PortMappings:
            - ContainerPort: !Ref ContainerPort
              Protocol: tcp
          Environment:
            - Name: PORT
              Value: !Ref ContainerPort
            - Name: AWS_DEFAULT_REGION
              Value: !Ref AWS::Region
            - Name: AWS_REGION
              Value: !Ref AWS::Region
            - Name: LITELLM_LOG
              Value: INFO
            - Name: LITELLM_MODEL
              Value: !Sub 'bedrock/${ClaudeModel}'
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LiteLLMLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs
          HealthCheck:
            Command:
              - CMD-SHELL
              - !Sub 'curl -f http://localhost:${ContainerPort}/health || exit 1'
            Interval: 30
            Timeout: 5
            Retries: 3
            StartPeriod: 60
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-litellm-task'
        - Key: Purpose
          Value: 'LiteLLM ECS Task Definition'

Outputs:
  TaskDefinitionArn:
    Description: 'ARN of the LiteLLM ECS Task Definition'
    Value: !Ref LiteLLMTaskDefinition
    Export:
      Name: !Sub '${AWS::StackName}-TaskDefinitionArn'

  SecurityGroupId:
    Description: 'ID of the LiteLLM Security Group'
    Value: !Ref LiteLLMSecurityGroup
    Export:
      Name: !Sub '${AWS::StackName}-SecurityGroupId'

  TaskExecutionRoleArn:
    Description: 'ARN of the ECS Task Execution Role'
    Value: !GetAtt ECSTaskExecutionRole.Arn
    Export:
      Name: !Sub '${AWS::StackName}-TaskExecutionRoleArn'

  TaskRoleArn:
    Description: 'ARN of the ECS Task Role with Bedrock permissions'
    Value: !GetAtt ECSTaskRole.Arn
    Export:
      Name: !Sub '${AWS::StackName}-TaskRoleArn'

  LogGroupName:
    Description: 'Name of the CloudWatch Log Group'
    Value: !Ref LiteLLMLogGroup
    Export:
      Name: !Sub '${AWS::StackName}-LogGroupName'

  ContainerPort:
    Description: 'Port on which LiteLLM container listens'
    Value: !Ref ContainerPort
    Export:
      Name: !Sub '${AWS::StackName}-ContainerPort'
