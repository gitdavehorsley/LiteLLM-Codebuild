AWSTemplateFormatVersion: '2010-09-09'
Description: Build and push mcpo Docker image (with SSM Agent and EFS utils) to ECR using CodeBuild

Parameters:
  RepositoryName:
    Type: String
    Default: mcpo
    Description: ECR repository name
  ImageTag:
    Type: String
    Default: latest
    Description: Image tag to push
  GitHubRepoUrl:
    Type: String
    Default: https://github.com/open-webui/mcpo.git
    Description: Public GitHub repo URL to build
  CodeBuildComputeType:
    Type: String
    Default: BUILD_GENERAL1_SMALL
    AllowedValues:
      - BUILD_GENERAL1_SMALL
      - BUILD_GENERAL1_MEDIUM
      - BUILD_GENERAL1_LARGE
    Description: CodeBuild instance size
  CodeBuildImage:
    Type: String
    Default: aws/codebuild/standard:7.0
    Description: CodeBuild managed image with Docker CLI

Resources:
  EcrRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Ref RepositoryName

  CodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess
      Policies:
        - PolicyName: CodeBuildEcrDockerAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: EcrAuth
                Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
                Resource: '*'
              - Sid: EcrCrudOnRepo
                Effect: Allow
                Action:
                  - ecr:BatchCheckLayerAvailability
                  - ecr:CompleteLayerUpload
                  - ecr:GetDownloadUrlForLayer
                  - ecr:InitiateLayerUpload
                  - ecr:PutImage
                  - ecr:UploadLayerPart
                  - ecr:DescribeRepositories
                  - ecr:BatchGetImage
                Resource: !GetAtt EcrRepository.Arn
              - Sid: SSMParamReadOptional
                Effect: Allow
                Action:
                  - ssm:GetParameter
                  - ssm:GetParameters
                  - ssm:GetParameterHistory
                Resource: '*'
              - Sid: Ec2DescribeRegion
                Effect: Allow
                Action:
                  - ec2:DescribeRegions
                Resource: '*'

  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub ${AWS::StackName}-mcpo-build
      ServiceRole: !GetAtt CodeBuildServiceRole.Arn
      Artifacts:
        Type: NO_ARTIFACTS
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: !Ref CodeBuildComputeType
        Image: !Ref CodeBuildImage
        PrivilegedMode: true
        EnvironmentVariables:
          - Name: REPOSITORY_NAME
            Value: !Ref RepositoryName
          - Name: IMAGE_TAG
            Value: !Ref ImageTag
      Source:
        Type: GITHUB
        Location: !Ref GitHubRepoUrl
        GitCloneDepth: 1
        BuildSpec: |
          version: 0.2
          env:
            shell: bash
          phases:
            pre_build:
              commands:
                - set -euo pipefail
                - echo Logging in to Amazon ECR...
                - ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
                - REGION=$AWS_DEFAULT_REGION
                - REPOSITORY_URI=$ACCOUNT_ID.dkr.ecr.$REGION.amazonaws.com/$REPOSITORY_NAME
                - aws ecr get-login-password --region $REGION | docker login --username AWS --password-stdin $ACCOUNT_ID.dkr.ecr.$REGION.amazonaws.com
            build:
              commands:
                - echo Building Docker image with SSM Agent and EFS utils...
                - ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text); REGION=$AWS_DEFAULT_REGION; REPOSITORY_URI=$ACCOUNT_ID.dkr.ecr.$REGION.amazonaws.com/$REPOSITORY_NAME
                - |
                  cat > Dockerfile.cicd <<'EOF'
                  FROM public.ecr.aws/amazonlinux/amazonlinux:2023

                  # Base tools, SSM Agent, and EFS utils
                  RUN dnf -y update && \
                      dnf -y install python3.11 python3.11-pip git tar gzip amazon-ssm-agent amazon-efs-utils && \
                      dnf clean all && rm -rf /var/cache/dnf

                  WORKDIR /app
                  # Copy mcpo source into the image
                  COPY . /app

                  # Build and install mcpo from the repo's pyproject
                  RUN python3.11 -m pip install --upgrade pip && \
                      pip3.11 install --no-cache-dir .

                  EXPOSE 8000
                  # mcpo is the entrypoint; pass arguments at runtime (e.g., server flags)
                  ENTRYPOINT ["mcpo"]
                  CMD ["--help"]
                  EOF
                - SHORT_SHA=${CODEBUILD_RESOLVED_SOURCE_VERSION:0:7}
                - docker build -t "$REPOSITORY_NAME:$IMAGE_TAG" -t "$REPOSITORY_URI:$IMAGE_TAG" -t "$REPOSITORY_URI:sha-$SHORT_SHA" -f Dockerfile.cicd .
            post_build:
              commands:
                - echo Pushing image to ECR...
                - ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text); REGION=$AWS_DEFAULT_REGION; REPOSITORY_URI=$ACCOUNT_ID.dkr.ecr.$REGION.amazonaws.com/$REPOSITORY_NAME
                - docker push "$REPOSITORY_URI:$IMAGE_TAG"
                - docker push "$REPOSITORY_URI:sha-$SHORT_SHA"
                - echo Build completed on `date`
          cache:
            paths: []
      TimeoutInMinutes: 60
      QueuedTimeoutInMinutes: 60
      BadgeEnabled: true

Outputs:
  EcrRepositoryUri:
    Description: ECR repository URI
    Value: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${RepositoryName}
  EcrRepositoryName:
    Description: ECR repository name
    Value: !Ref EcrRepository
  CodeBuildProjectName:
    Description: CodeBuild project name to trigger builds
    Value: !Ref CodeBuildProject
  CodeBuildProjectArn:
    Description: CodeBuild project ARN
    Value: !GetAtt CodeBuildProject.Arn
  ExampleStartBuildCli:
    Description: Example CLI to start a build
    Value: !Sub aws codebuild start-build --project-name ${CodeBuildProject}
